TW.IDE.Widgets.eventkiller=function(){this.widgetIconUrl=function(){return"../Common/extensions/EventKillerWidget/ui/eventkiller/gun.png"};this.widgetProperties=function(){return{name:"EventKiller",description:'Widget to "kill" events occurring within a certain interval (temporal or numerical)',category:["Common"],iconImage:"gun.png",properties:{Width:{description:"width",defaultValue:200},Height:{description:"height",defaultValue:28},killerMode:{isBindingTarget:!1,description:'Time = the "extermination" occurs on a temporal basis; Time, keep the first alive = the "extermination" occurs on a temporal basis, but the first event is preserved; Time, wait for = the "extermination" occurs on a temporal basis, after receiving the first event the widget waits for a time interval and then sends the event, during the time interval all events are killed; Count = the "extermination" occurs on a numerical basis; Count, keep the first alive = the "extermination" occurs on a numerical basis, but the first event is preserved; Count, wait for = the "extermination" occurs on a numerical basis, after receiving the first event the widget waits for a count interval and then sends the event, during the count interval all events are killed',
baseType:"STRING",defaultValue:"timeKeep",selectOptions:[{value:"time",text:"Time"},{value:"timeKeep",text:"Time, keep the first alive"},{value:"timeWait",text:"Time, wait for"},{value:"count",text:"Count"},{value:"countKeep",text:"Count, keep the first alive"},{value:"countWait",text:"Count, wait for"}]},killerInterval:{description:'The time interval (in milliseconds) within which to "kill" the events',defaultValue:1E3,baseType:"INTEGER",isEditable:!0},killerCount:{description:'The number of events to "kill"',
defaultValue:5,baseType:"INTEGER",isEditable:!0,isVisible:!1},numberOfEvents:{description:"The number of events",baseType:"INTEGER",defaultValue:5},oneShot:{description:'true if the "extermination" must take place only once (it will apply in both killerMode options)',defaultValue:!1,baseType:"BOOLEAN",isEditable:!0},debugMode:{isVisible:!0,baseType:"BOOLEAN",isEditable:!0,defaultValue:!1,description:"true to activate the debug"}}}};this.widgetEvents=function(){return{Triggered:{}}};this.renderHtml=
function(){return'<div class="widget-content widget-eventkiller"><span class="eventkiller-property">Event Killer</span></div>'};this.afterRender=function(){this.addNewEventParameters(this.getProperty("numberOfEvents"));this.setKillerMode(this.getProperty("killerMode"))};this.afterSetProperty=function(b,a){"numberOfEvents"===b?(this.deleteOldEventParameters(),this.addNewEventParameters(a)):"killerMode"===b&&this.setKillerMode(a);return!1};this.deleteOldEventParameters=function(){var b=this.allWidgetProperties().properties,
a;for(a in b)a.toLowerCase().startsWith("event")&&delete b[a]};this.addNewEventParameters=function(b){for(var a=this.allWidgetProperties().properties,c=1;c<=b;c++)a["Event"+c]={name:"Event"+c,type:"service",description:"Service to call for event N. "+c,isVisible:!0};this.updatedProperties({updateUI:!0})};this.setKillerMode=function(b){var a=this.allWidgetProperties().properties;a.killerInterval.isVisible=b.startsWith("time");a.killerCount.isVisible=b.startsWith("count");this.updatedProperties({updateUI:!0})}};